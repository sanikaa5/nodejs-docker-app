pipeline {
    agent any

    environment {
        DOCKER_IMAGE = "sanikaa5/nodejs-docker-app:latest"
        CONTAINER_NAME = "nodejs-app-container"
        TF_DIR = "terraform"
        ANSIBLE_DIR = "ansible"
    }

    stages {

        stage('Clone Repository') {
            steps {
                echo "Cloning repository..."
                git branch: 'main', url: 'https://github.com/sanikaa5/nodejs-docker-app.git'
            }
        }

        stage('Build Docker Image') {
            steps {
                echo "Building Docker image..."
                sh """
                docker build -t ${DOCKER_IMAGE} .
                """
            }
        }

        stage('Run Container Locally') {
            steps {
                echo "Running container locally for validation..."
                sh """
                docker ps -q --filter "name=${CONTAINER_NAME}" | grep -q . && docker stop ${CONTAINER_NAME} && docker rm ${CONTAINER_NAME} || true
                docker run -d -p 3000:3000 --name ${CONTAINER_NAME} ${DOCKER_IMAGE}
                sleep 5
                curl -f http://localhost:3000 || (echo "Container failed to start!" && exit 1)
                """
            }
        }

        stage('Provision Infrastructure with Terraform') {
            steps {
                dir("${TF_DIR}") {
                    echo "Provisioning AWS infrastructure with Terraform..."
                    sh """
                    terraform init -input=false
                    terraform apply -auto-approve -input=false
                    """
                }
            }
        }

        stage('Deploy with Ansible') {
            steps {
                dir("${ANSIBLE_DIR}") {
                    echo "Deploying to server with Ansible..."
                    sh """
                    ansible-playbook -i inventory.ini playbook.yml
                    """
                }
            }
        }

        stage('Deployment Complete') {
            steps {
                script {
                    def publicIp = sh(
                        script: "cd ${TF_DIR} && terraform output -raw instance_public_ip",
                        returnStdout: true
                    ).trim()
                    echo "Application successfully deployed! Access it at: http://${publicIp}:3000"
                }
            }
        }
    }

    post {
        always {
            echo "Cleaning up local container..."
            sh """
            docker stop ${CONTAINER_NAME} || true
            docker rm ${CONTAINER_NAME} || true
            """
        }
    }
}
